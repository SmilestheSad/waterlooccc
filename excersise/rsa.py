# import numpy

import math

def encrpt(): 
    n= 29129463609326322559521123136222078780585451208149138547799121083622333250646678767769126248182207478527881025116332742616201890576280859777513414460842754045651093593251726785499360828237897586278068419875517543013545369871704159718105354690802726645710699029936754265654381929650494383622583174075805797766685192325859982797796060391271817578087472948205626257717479858369754502615173773514087437504532994142632207906501079835037052797306690891600559321673928943158514646572885986881016569647357891598545880304236145548059520898133142087545369179876065657214225826997676844000054327141666320553082128424707948750331
    clear = 1815907181716474805136452061793917684000871911998851410864797078911161933431337632774829806207517001958179617856720738101327521552576351369691667910371502971480153619360010341709624631317220940851114914911751279825748
    e= 3
    s = pow(clear,e,n) 
    print(s)

# e =17
# m = 780
# print(mod)

def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)
 
def modinv(a, m):
	g, x, y = extended_gcd(a, m)
	if g != 1:
		raise ValueError
	return x % m

def genPrivateKey():
        
    q = 92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559
    p = 97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637
    e = 65537
    n= p*q
    t = (q-1)*(p-1)
    # print(modinv(e,m))
    d= modinv(e,t)
    clear = 10
    cipher = pow(clear,e,n)
    clear2 = pow(cipher,d,n)
    print(clear2)
def getQ():
    p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
    n = 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239
    q =pow(p,math.e,n)
    print(q)
    #

def findMin(base, pBase):
    p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
    n = 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239
    #nStart = 156408916769576372447679420270074329152141724359960424609614116786480948227061708221210984590849707226627556583697328505998764339640452837133163831713466852124818083977171822714390229234394833728974609768242584187215380595867487111036246770162889748902819701138699439286309636525761553667763601017336754077696
    #pBase = 966

    # qClose = 156408916769576371200279226810874446866908778711936320817457079014319984787969681697953552172747166111028828150800015325159735062020143309650390088967470814162835710049152185014386683639966285905513533865515717198057032630527534615204490235712345755847285158358671840844359069728414027641289541498371747872772
    # print('base,pbase',base,pBase)
    # n2 = p*qClose

    # ajustedQ = base - pow(2,pBase)
    if (pBase > 0):
        n3 = p*base
        diff = len(str(n3 -n))
        print(diff)
        if ( n3 > n ):
            print('Q is bigger , try smaller one ',pBase)
            base = base - pow(2,pBase-1)
            print(base)
            pBase -= 1
            findMin(base,pBase)
        
        elif n3 < n:
            print('Binary search is closer')
            base = base + pow(2,pBase-1)
            pBase -= 1
            findMin(base,pBase)
            # print(ajustedQ)
            # breakFlag=0
        else:
            print('Find Match',ajustedQ)


def lastTry():
    q = 156408916769576372285319235535320446340733908943564048157238512311891352879208957302116527435165097143521156600690562005797819820759620198602417583539668686152735534648541252847927334505648478214810780526425005943955838623325525300844493280040860604499838598837599791480284496210333200247148213274376422459176
    p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
    n = 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239
    
    BreakFlag = 1
    while BreakFlag:
        
        n2 = p*q
        if ( n2 < n):
            q = q + 1
            print(len(str(n2-n)))
        elif n2 > n:
            BreakFlag = 0
        else:
            BreakFlag = 0
            print('Find Q',q)

def decrpt():
    p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
    ciphertext = 313988037963374298820978547334691775209030794488153797919908078268748481143989264914905339615142922814128844328634563572589348152033399603422391976806881268233227257794938078078328711322137471700521343697410517378556947578179313088971194144321604618116160929667545497531855177496472117286033893354292910116962836092382600437895778451279347150269487601855438439995904578842465409043702035314087803621608887259671021452664437398875243519136039772309162874333619819693154364159330510837267059503793075233800618970190874388025990206963764588045741047395830966876247164745591863323438401959588889139372816750244127256609
    e = 65537
    n = 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239
    
    # q = int(n1/p)
    qBase = 156408916769576373071379516999674270294758197183972476505692635672561429946607721482839700799900977784426920800145985096418278978450607600874550703086464871105809270941181641564392002031609107640705147719606017681794554578537463358952125037388161745430586972528713238507284919924435316681000630776819257180160
    qMax = 156408916769576372447679420270074329152141724359960424609614116786480948227061708221210984590849707226627556583697328505998764339640452837133163831713466852124818083977171822714390229234394833728974609768242584187215380595867487111036246770162889748902819701138699439286309636525761553667763601017336754077696
    qMin = 156408916769576371823979323540474388009525251535948372713535597900400466507515694959582268381798436668828192367248671915579249700830298073391776960340468833143826897013162003864388456437180559817244071816879150692636206613197510863120368502937617752375052429748685640065334353127087790654526571257854250975232
    # tryN=965
    # breakFlag = 1
    # while breakFlag:
    #     ajustedQ = qBase -pow(2,tryN)
    #     n3 = p*ajustedQ
    #     if ( n3 > n1 ):
    #         print('N is too large ',tryN)
    #         print(ajustedQ)
    #         tryN +=1
            
    #     else:
    #         print('TryN=',tryN)
    #         print(ajustedQ)
    #         breakFlag=0
    q = 156408916769576372285319235535320446340733908943564048157238512311891352879208957302116527435165097143521156600690562005797819820759620198602417583539668686152735534648541252847927334505648478214810780526425005943955838623325525300844493280040860604499838598837599791480284496210333200247148213274376422459183
    # print(p)
    m =(q-1)*(p-1)
    d= modinv(e,m)
    e = 0
    clear = pow(ciphertext,d,n)
   
    print(clear)
  

# decrpt()
# findMin(156408916769576372447679420270074329152141724359960424609614116786480948227061708221210984590849707226627556583697328505998764339640452837133163831713466852124818083977171822714390229234394833728974609768242584187215380595867487111036246770162889748902819701138699439286309636525761553667763601017336754077696,966)
# genPrivateKey()
# lastTry()
# getQ()


# p=61
# q=53
# n=p*q  # KNOWN
# e=3  #public key, KNOWN
# m=(q-1)*(p-1)
# d=modinv(e,m)  #private key
# clear=65
# cipher=2790

# cipherCal=pow(clear,e,n) #encode -KNOWN

# clearCal =pow(cipher,d,n) #decode


# x = pow(clear,e)
# y= cipher%n
# print('done')


n= 374159235470172130988938196520880526947952521620932362050308663243595788308583992120881359365258949723819911758198013202644666489247987314025169670926273213367237020188587742716017314320191350666762541039238241984934473188656610615918474673963331992408750047451253205158436452814354564283003696666945950908549197175404580533132142111356931324330631843602412540295482841975783884766801266552337129105407869020730226041538750535628619717708838029286366761470986056335230171148734027536820544543251801093230809186222940806718221638845816521738601843083746103374974120575519418797642878012234163709518203946599836959811
# hexn = hex(n).split('x')[-1]
# print(len(str(hexn)))

e=3
c =      2205316413931134031046440767620541984801091216351222789180593875373829950860542792110364325728088504479780803714561464250589795961097670884274813261496112882580892020487261058118157619586156815531561455215290361274334977137261636930849125 
cStart = 735105471310378010348813589206847328267030405450407596393531291791276650286847597370121441909362834826593601238187154750196598653699223628091604420498704294193630673495753686039385873195385605177187151738430120424778325712420545643616375



# mStart = 240109877286251840533272915662757983981706320845661471802585807564915966910384357188798388651570045
mStart = 103406706987313595259991526467906648647133231414835694525975144664293904460423361987328815087629181



pbase = 10
breakFlag = 1
# while breakFlag:
#     c2 = pow(mStart,3)
#     if c2 < c:
#         print('not found',pbase)
#         breakFlag = 0
#     elif c2 > c:
#         print('Too large decrease m',pbase)
#         mStart = mStart - 2**pbase
#         pbase +=1
#     else:
#         print('Lucky you, found:',mStart)
# print(base)

def findMin2(base, delta):
    p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
    c = 2205316413931134031046440767620541984801091216351222789180593875373829950860542792110364325728088504479780803714561464250589795961097670884274813261496112882580892020487261058118157619586156815531561455215290361274334977137261636930849125 
    

    if (base > 0):
        # print(base,delta)
        c2 = pow(base,3)
        # diff = len(str(n3 -n))
        # print(diff)
        if ( c2 > c ):
            print('base is bigger , try smaller one',len(str(delta)),base)
            base = base - int(delta/2)
            print(base)
            findMin2(base,int(delta/2))
        
        elif c2 < c:
            print('Binary search is closer',len(str(delta)),base)
            base = base + int(delta/2)
            # pBase -= 1
            findMin2(base,int(delta/2))
            # print(ajustedQ)
            # breakFlag=0
        else:
            print('Find Match',base)

# print()
findMin2(mStart,int(mStart))

# mFinal = 13016382529449106065839070830454998857466392684017754632233929110204433151964285

# c2 = pow(mFinal,3)
# print(c2)
# print(c)